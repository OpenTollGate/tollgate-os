name: 'Update Release JSON from NIP-94 Events'
description: 'Updates the release.json file with package information from NIP-94 events'
author: 'OpenTollGate'

inputs:
  artifacts_path:
    description: 'Path to the event files'
    required: true
    default: 'event_files'
  release_json_path:
    description: 'Path to the release.json file'
    required: true
    default: 'release.json'
  commit_message:
    description: 'Commit message for the update'
    required: false
    default: 'Update release.json with NIP-94 events'
  target_branch:
    description: 'Branch to push changes to'
    required: false
    default: 'develop'
  github_token:
    description: 'GitHub token for authentication'
    required: true

runs:
  using: "composite"
  steps:
    - name: Verify Events
      shell: bash
      run: |
        echo "Looking for NIP-94 events in ${{ inputs.artifacts_path }}"
        find ${{ inputs.artifacts_path }} -type f -name "event_*.json" | sort
        
        if [ ! -f "${{ inputs.release_json_path }}" ]; then
          echo "::error::release.json file not found at ${{ inputs.release_json_path }}"
          exit 1
        fi

    - name: Update release.json from NIP-94 Events
      shell: bash
      run: |
        # Create a backup of the original file
        cp ${{ inputs.release_json_path }} ${{ inputs.release_json_path }}.bak
        
        echo "Processing NIP-94 events from ${{ inputs.artifacts_path }}"
        EVENT_COUNT=$(find ${{ inputs.artifacts_path }} -name "event_*.json" | wc -l)
        echo "Found $EVENT_COUNT event files to process"
        
        if [ "$EVENT_COUNT" -eq 0 ]; then
          echo "::warning::No event files found!"
          exit 0
        fi
        
        # Debug available modules in release.json
        echo "Available modules in release.json:"
        jq -r '.modules[].name' ${{ inputs.release_json_path }}
        
        # Process each event file
        for EVENT_FILE in ${{ inputs.artifacts_path }}/event_*.json; do
          echo "----- Processing event file: $EVENT_FILE -----"
          
          # Get values and explicitly trim whitespace and newlines
          FILENAME=$(jq -r '.tags[] | select(.[0] == "filename")[1] // empty' "$EVENT_FILE" | tr -d '\n' | xargs)
          ARCH=$(jq -r '.tags[] | select(.[0] == "arch")[1] // empty' "$EVENT_FILE" | tr -d '\n' | xargs)
          HASH=$(jq -r '.tags[] | select(.[0] == "x")[1] // empty' "$EVENT_FILE" | tr -d '\n' | xargs)
          URL=$(jq -r '.tags[] | select(.[0] == "url")[1] // empty' "$EVENT_FILE" | tr -d '\n' | xargs)
          EVENT_ID=$(jq -r '.id // empty' "$EVENT_FILE" | tr -d '\n' | xargs)
          
          # Debug output to verify tag contents
          echo "URL tag contains: $(jq -r '.tags[] | select(.[0] == "url")' "$EVENT_FILE")"
          echo "Hash tag contains: $(jq -r '.tags[] | select(.[0] == "x")' "$EVENT_FILE")"
          
          echo "Found: ID=$EVENT_ID, Filename=$FILENAME, Arch=$ARCH"
          echo "URL=$URL, Hash=$HASH"
          
          # Skip if URL or hash is missing
          if [ -z "$URL" ] || [ -z "$HASH" ]; then
            echo "::warning::Event missing URL or hash, cannot process: $EVENT_FILE"
            continue
          fi
          
          # Extract module from filename (e.g., relay-gl-ar300m-mipsel_24kc.ipk -> relay)
          if [[ "$FILENAME" =~ ^([^-]+)- ]]; then
            MODULE="${BASH_REMATCH[1]}"
            MODULE=$(echo "$MODULE" | tr -d '\n' | xargs)
            echo "Extracted module name: '$MODULE'"
          else
            echo "::warning::Could not extract module name from filename: '$FILENAME'"
            continue
          fi
          
          # Skip if any required fields are missing
          if [ -z "$MODULE" ] || [ -z "$ARCH" ]; then
            echo "::warning::Skipping event with missing required tags. Module: '$MODULE', Arch: '$ARCH'"
            continue
          fi
          
          echo "Updating release.json for module: '$MODULE', architecture: '$ARCH'"
          
          # Verify module exists in release.json with debug output
          MODULE_COUNT=$(jq --arg module "$MODULE" '.modules[] | select(.name == $module) | .name' ${{ inputs.release_json_path }} | wc -l)
          echo "Found $MODULE_COUNT matches for module '$MODULE' in release.json"
          
          # Update release.json using jq if the module already exists
          if [ "$MODULE_COUNT" -gt 0 ]; then
            # Module exists, update it
            TMP_FILE=$(mktemp)
            jq --arg module "$MODULE" \
               --arg arch "$ARCH" \
               --arg url "$URL" \
               --arg hash "$HASH" \
               --arg eventId "$EVENT_ID" \
               '(.modules[] | select(.name == $module) | .versions[0].architectures[$arch]) |= {
                 "url": $url,
                 "hash": ("sha256:" + $hash),
                 "eventId": $eventId
               }' \
               ${{ inputs.release_json_path }} > "$TMP_FILE"
            
            if [ $? -eq 0 ]; then
              mv "$TMP_FILE" ${{ inputs.release_json_path }}
              echo "✅ Successfully updated $MODULE/$ARCH in release.json"
            else
              echo "❌ Error updating JSON for $MODULE/$ARCH"
              cat "$TMP_FILE"
              rm "$TMP_FILE"
            fi
          else
            echo "Module '$MODULE' not found in release.json. Here's what we have instead:"
            jq -r '.modules[].name' ${{ inputs.release_json_path }}
          fi
        done
        
        # Show the diff
        echo "Changes to release.json:"
        diff -u ${{ inputs.release_json_path }}.bak ${{ inputs.release_json_path }} || true
      
    - name: Commit and Push Changes
      shell: bash
      run: |
        # Configure git
        git config --global user.name "GitHub Actions Bot"
        git config --global user.email "actions@github.com"
        
        # Set up authentication
        git remote set-url origin "https://x-access-token:${{ inputs.github_token }}@github.com/$GITHUB_REPOSITORY.git"
        
        # Add and commit changes
        git add ${{ inputs.release_json_path }}
        
        # Check if there are changes to commit
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "${{ inputs.commit_message }}"
          echo "Pushing changes to ${{ inputs.target_branch }} branch..."
          git push origin HEAD:${{ inputs.target_branch }}
        fi

    - name: Debug NIP-94 Event Contents
      if: steps.publish_package.outputs.eventId != ''
      shell: bash
      run: |
        echo "Event ID: ${{ steps.publish_package.outputs.eventId }}"
        # Use nak to fetch the event and examine it
        nak event -i ${{ steps.publish_package.outputs.eventId }} -r wss://relay.damus.io | jq .
        
        # Check specific tags to ensure URL and hash are present
        URL=$(nak event -i ${{ steps.publish_package.outputs.eventId }} -r wss://relay.damus.io | jq -r '.tags[] | select(.[0] == "url")[1] // "MISSING"')
        HASH=$(nak event -i ${{ steps.publish_package.outputs.eventId }} -r wss://relay.damus.io | jq -r '.tags[] | select(.[0] == "x")[1] // "MISSING"')
        
        echo "URL in published event: $URL"
        echo "Hash in published event: $HASH"
        
        if [ "$URL" == "MISSING" ] || [ "$HASH" == "MISSING" ]; then
          echo "::warning::URL or hash missing in the published event!"
        else
          echo "✅ Event contains both URL and hash"
        fi