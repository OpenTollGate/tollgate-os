# .github/workflows/update-release-json.yml in tollgate-os
name: Test Update Release JSON

on:
  push:
    branches-ignore:
      - 'develop'
    paths:
      - '.github/workflows/update-release-json.yml'
      - 'actions/update-release-json/**'
  workflow_dispatch:
    inputs:
      run_id:
        description: 'Run ID of the build workflow'
        required: true
  repository_dispatch:
    types: [test-update-release-json]

# Add permissions block here
permissions:
  contents: write

jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: update-release-json
          token: ${{ secrets.REPOSCOPE }}
          clean: true
          persist-credentials: false
          fetch-depth: 0

      - name: Analyze release.json Structure
        run: |
          echo "Analyzing release.json structure..."
          
          # List all modules in release.json
          echo "Available modules:"
          jq -r '.modules[].name' release.json
          
          # List all architectures for each module
          echo "Available architectures for each module:"
          jq -r '.modules[] | "\(.name): \((.versions[0].architectures | keys | join(", ")))"' release.json

      - name: Create Test Artifacts for Existing Modules
        run: |
          # This will still generate dummy artifacts
          MODULES=$(jq -r '.modules[].name' release.json)
          echo "Found modules: $MODULES"
          
          # Create test artifacts for each module
          for MODULE in $MODULES; do
            echo "Creating test artifacts for $MODULE"
            
            # Create directory structures for different models
            mkdir -p "artifacts/package-gl-ar300m-tollgate-module-${MODULE}-go"
            mkdir -p "artifacts/package-gl-mt3000-tollgate-module-${MODULE}-go"
            mkdir -p "artifacts/package-gl-mt6000-tollgate-module-${MODULE}-go"
            
            # Create dummy IPK files with unique content
            echo "$MODULE package for ar300m - $(date +%s%N)" > "artifacts/package-gl-ar300m-tollgate-module-${MODULE}-go/${MODULE}-ar300m.ipk"
            echo "$MODULE package for mt3000 - $(date +%s%N)" > "artifacts/package-gl-mt3000-tollgate-module-${MODULE}-go/${MODULE}-mt3000.ipk"
            echo "$MODULE package for mt6000 - $(date +%s%N)" > "artifacts/package-gl-mt6000-tollgate-module-${MODULE}-go/${MODULE}-mt6000.ipk"
            
            # Calculate hashes
            AR300M_HASH=$(sha256sum "artifacts/package-gl-ar300m-tollgate-module-${MODULE}-go/${MODULE}-ar300m.ipk" | cut -d' ' -f1)
            MT3000_HASH=$(sha256sum "artifacts/package-gl-mt3000-tollgate-module-${MODULE}-go/${MODULE}-mt3000.ipk" | cut -d' ' -f1)
            MT6000_HASH=$(sha256sum "artifacts/package-gl-mt6000-tollgate-module-${MODULE}-go/${MODULE}-mt6000.ipk" | cut -d' ' -f1)
            
            # Create event ID files
            echo "{\"eventId\":\"$(echo $AR300M_HASH | cut -c1-64)\",\"hash\":\"$AR300M_HASH\"}" > "artifacts/${MODULE}-ar300m-event.json"
            echo "{\"eventId\":\"$(echo $MT3000_HASH | cut -c1-64)\",\"hash\":\"$MT3000_HASH\"}" > "artifacts/${MODULE}-mt3000-event.json"
            echo "{\"eventId\":\"$(echo $MT6000_HASH | cut -c1-64)\",\"hash\":\"$MT6000_HASH\"}" > "artifacts/${MODULE}-mt6000-event.json"
          done
          
          echo "Test artifacts created for all modules:"
          find artifacts -type f | sort

      - name: Debug Directory Structure
        run: |
          echo "Current directory: $(pwd)"
          echo "Repository contents:"
          ls -la
          echo "Actions directory:"
          ls -la actions || echo "Actions directory not found"
          echo "Update release json action directory:"
          ls -la actions/update-release-json || echo "Update release json action directory not found"
          echo "Artifacts directory:"
          find artifacts -type f | sort
        
      - name: Update Release JSON
        uses: ./actions/update-release-json
        with:
          artifacts_path: artifacts
          release_json_path: release.json
          target_branch: develop
          github_token: ${{ secrets.REPOSCOPE }}  # Use PAT here
          commit_message: "Update release.json with latest module packages [skip ci]"