# .github/workflows/update-release-json.yml in tollgate-os
name: Update Release JSON with Real Events

on:
  push:
    branches:
      - '*'
    paths:
      - '.github/workflows/update-release-json.yml'
      - 'actions/update-release-json/**'
  workflow_dispatch:
    inputs:
      run_id:
        description: 'Run ID of the build workflow'
        required: true
  repository_dispatch:
    types: [update-release-json]

# Add permissions block here
permissions:
  contents: write

jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: develop
          token: ${{ secrets.REPOSCOPE }}
          clean: true
          persist-credentials: false
          fetch-depth: 0


      - name: Install nak
        run: |
          sudo wget https://github.com/fiatjaf/nak/releases/download/v0.12.4/nak-v0.12.4-linux-amd64 -O /usr/local/bin/nak
          sudo chmod +x /usr/local/bin/nak
    
      - name: Verify Event on Network with nak
        run: |
          # Get the pubkey from secrets
          PUBKEY="${{ secrets.NIP_94_PUBKEY }}"
          GENERATED_HASH="${{ steps.upload_test.outputs.hash }}"
          
          if [ -z "$PUBKEY" ]; then
            echo "::error::NIP_94_PUBKEY secret is not set"
            exit 1
          fi
          
          echo "Fetching recent NIP-94 events for pubkey: $PUBKEY"
          
          # Query events by author and kind (1063 for NIP-94)
          nak req -a "$PUBKEY" -k 1063 --limit 10 wss://relay.damus.io > event_response.txt
          
          # Check for errors in the response
          if grep -q "ERROR" event_response.txt; then
            echo "::error::Error retrieving events from relay:"
            cat event_response.txt
            exit 1
          fi
          
          # Extract only the event data (removing connection messages)
          cat event_response.txt | grep -v "connecting to" | grep -v "NOTICE" > events_data.txt
          
          # Look for our event with matching hash
          echo "Looking for event with hash: $GENERATED_HASH"
          
          # Extract unique filenames and architectures from the events
          echo "Extracting unique filenames and architectures from events..."
          
          # Create temporary files to store unique values
          touch unique_filenames.txt
          touch unique_architectures.txt
          
          # Process each event to extract filename and architecture tags
          cat events_data.txt | jq -r '.tags[] | select(.[0] == "filename") | .[1]' | sort | uniq > unique_filenames.txt
          cat events_data.txt | jq -r '.tags[] | select(.[0] == "arch") | .[1]' | sort | uniq > unique_architectures.txt
          
          echo "Unique filenames found in the last week:"
          cat unique_filenames.txt
          
          echo "Unique architectures found in the last week:"
          cat unique_architectures.txt
          
          echo "✅ Successfully analyzed events on network!"

      - name: Show Events on Network with nak
        run: |
          # Get the pubkey from secrets
          PUBKEY="${{ secrets.NIP_94_PUBKEY }}"
          GENERATED_HASH="${{ steps.upload_test.outputs.hash }}"
          
          if [ -z "$PUBKEY" ]; then
            echo "::error::NIP_94_PUBKEY secret is not set"
            exit 1
          fi
          
          echo "Fetching recent NIP-94 events for pubkey: $PUBKEY"
          
          # Query events by author and kind (1063 for NIP-94)
          nak req -a "$PUBKEY" -k 1063 --limit 50 wss://relay.damus.io > event_response.txt
          
          # Check for errors in the response
          if grep -q "ERROR" event_response.txt; then
            echo "::error::Error retrieving events from relay:"
            cat event_response.txt
            exit 1
          fi
          
          # Extract only the event data (removing connection messages)
          cat event_response.txt | grep -v "connecting to" | grep -v "NOTICE" > events_data.txt
          
          # Look for our event with matching hash
          echo "Looking for event with hash: $GENERATED_HASH"
          
          # Create a temporary directory for processing
          mkdir -p temp_events
          
          # Extract unique filenames and architectures
          UNIQUE_FILENAMES=$(cat events_data.txt | jq -r '.tags[] | select(.[0] == "filename") | .[1]' | sort | uniq)
          
          echo "Finding most recent events for each unique filename and architecture..."
          
          # Process events to find the most recent for each filename
          echo "Most recent events by filename:"
          for FILENAME in $UNIQUE_FILENAMES; do
            echo "========== Filename: $FILENAME =========="
            # Find the most recent event with this filename (highest created_at value)
            cat events_data.txt | jq --arg filename "$FILENAME" '
              select(.tags | map(select(.[0] == "filename" and .[1] == $filename)) | length > 0)
            ' | jq -s 'sort_by(.created_at) | reverse | .[0]'
            echo ""
          done

          #UNIQUE_ARCHS=$(cat events_data.txt | jq -r '.tags[] | select(.[0] == "arch") | .[1]' | sort | uniq)
          # # Process events to find the most recent for each architecture
          # echo "Most recent events by architecture:"
          # for ARCH in $UNIQUE_ARCHS; do
          #   echo "========== Architecture: $ARCH =========="
          #   # Find the most recent event with this architecture (highest created_at value)
          #   cat events_data.txt | jq --arg arch "$ARCH" '
          #     select(.tags | map(select(.[0] == "arch" and .[1] == $arch)) | length > 0)
          #   ' | jq -s 'sort_by(.created_at) | reverse | .[0]'
          #   echo ""
          # done
          
          echo "✅ Successfully analyzed most recent events on network!"
          
      - name: Extract Events and Save to Files
        run: |
          # Get the pubkey from secrets
          PUBKEY="${{ secrets.NIP_94_PUBKEY }}"
          
          if [ -z "$PUBKEY" ]; then
            echo "::error::NIP_94_PUBKEY secret is not set"
            exit 1
          fi
          
          echo "Fetching recent NIP-94 events for pubkey: $PUBKEY"
          
          # Query events by author and kind (1063 for NIP-94)
          nak req -a "$PUBKEY" -k 1063 --limit 50 wss://relay.damus.io > event_response.txt
          
          # Check for errors in the response
          if grep -q "ERROR" event_response.txt; then
            echo "::error::Error retrieving events from relay:"
            cat event_response.txt
            exit 1
          fi
          
          # Extract only the event data (removing connection messages)
          cat event_response.txt | grep -v "connecting to" | grep -v "NOTICE" > events_data.txt
          
          # Create a directory for storing event files
          mkdir -p event_files
          
          # Extract unique filenames
          UNIQUE_FILENAMES=$(cat events_data.txt | jq -r '.tags[] | select(.[0] == "filename") | .[1]' | sort | uniq)
          
          echo "Finding most recent events for each unique filename..."
          
          # Process events to find the most recent for each filename and save to files
          EVENT_COUNT=0
          for FILENAME in $UNIQUE_FILENAMES; do
            echo "Processing: $FILENAME"
            # Find the most recent event with this filename (highest created_at value)
            cat events_data.txt | jq --arg filename "$FILENAME" '
              select(.tags | map(select(.[0] == "filename" and .[1] == $filename)) | length > 0)
            ' | jq -s 'sort_by(.created_at) | reverse | .[0]' > "event_files/event_${EVENT_COUNT}.json"
            
            # Check if the file has content
            if [ -s "event_files/event_${EVENT_COUNT}.json" ]; then
              echo "Saved event for $FILENAME to event_files/event_${EVENT_COUNT}.json"
              EVENT_COUNT=$((EVENT_COUNT + 1))
            else
              echo "No valid event found for $FILENAME"
              rm "event_files/event_${EVENT_COUNT}.json"
            fi
          done
          
          echo "Total events extracted: $EVENT_COUNT"
          echo "EVENT_COUNT=$EVENT_COUNT" >> $GITHUB_ENV
          
          echo "✅ Successfully extracted events from network!"

      - name: Update Release JSON for Each Event
        run: |
          EVENT_COUNT="${{ env.EVENT_COUNT }}"
          
          if [ "$EVENT_COUNT" -eq 0 ]; then
            echo "::warning::No events found to process"
            exit 0
          fi
          
          for i in $(seq 0 $((EVENT_COUNT - 1))); do
            EVENT_FILE="event_files/event_${i}.json"
            
            echo "Processing event file: $EVENT_FILE"
            
            # Create a temporary directory for this event
            mkdir -p "sdk-artifacts-${i}"
            
            # Copy the event to the temporary directory
            cp "$EVENT_FILE" "sdk-artifacts-${i}/event.json"
          done
          
          echo "✅ Successfully prepared all events for processing!"

      - name: Final Update Release JSON
        uses: ./actions/update-from-nip94
        with:
          artifacts_path: event_files
          release_json_path: release.json
          target_branch: develop
          github_token: ${{ secrets.REPOSCOPE }}
          commit_message: "Update release.json with all NIP-94 events [skip ci]"

      # - name: Download SDK Artifacts
      #   uses: dawidd6/action-download-artifact@v2
      #   with:
      #     run_id: ${{ github.event.client_payload.sdk_run_id }}
      #     repo: OpenTollGate/tollgate-sdk
      #     github_token: ${{ secrets.REPOSCOPE }}
      #     path: sdk-artifacts
      #     check_artifacts: true
      #     # Use the array directly without fromJson()
      #     name: ${{ join(github.event.client_payload.artifacts, ',') }}

      # - name: Process Real Events
      #   run: |
      #     echo "Real artifacts downloaded:"
      #     find sdk-artifacts -type f | sort
      #     # Verify NIP-94 event files exist
      #     if [ $(find sdk-artifacts -name '*-event.json' | wc -l) -eq 0 ]; then
      #       echo "::error::No NIP-94 event files found!"
      #       exit 1
      #     fi

      # - name: Update Release JSON
      #   uses: ./actions/update-release-json
      #   with:
      #     artifacts_path: sdk-artifacts  # Changed from artifacts
      #     release_json_path: release.json
      #     target_branch: develop
      #     github_token: ${{ secrets.REPOSCOPE }}
      #     commit_message: "Update release.json with real NIP-94 events [skip ci]"

      # - name: Debug Incoming Payload
      #   run: |
      #     echo "Full event payload:"
      #     echo '${{ toJSON(github.event) }}' | jq .
          
      #     echo "Client payload contents:"
      #     echo '${{ toJSON(github.event.client_payload) }}' | jq .
          
      #     echo "NIP-94 events data:"
      #     echo '${{ toJSON(github.event.client_payload.nip94_events) }}' | jq .
          
      #     # Write to a file for validation
      #     mkdir -p debug
      #     echo '${{ toJSON(github.event.client_payload.nip94_events) }}' > debug/received_events.json
      #     echo "Stored events in debug/received_events.json"

      # - name: Validate Event Structure
      #   run: |
      #     if [ ! -s "debug/received_events.json" ]; then
      #       echo "::error::No events data received!"
      #       exit 1
      #     fi
          
      #     # Validate JSON structure
      #     if ! jq empty debug/received_events.json; then
      #       echo "::error::Invalid JSON structure in received events"
      #       jq . debug/received_events.json
      #       exit 1
      #     fi
          
      #     # Check for at least one event
      #     EVENT_COUNT=$(jq '.events | length' debug/received_events.json)
      #     if [ "$EVENT_COUNT" -eq 0 ]; then
      #       echo "::warning::Received empty events array"
      #     else
      #       echo "Received $EVENT_COUNT valid NIP-94 events"
      #     fi

